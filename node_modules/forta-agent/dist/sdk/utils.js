"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keccak256 = exports.assertIsFromEnum = exports.assertIsNonEmptyString = exports.createBlockEvent = exports.createTransactionEvent = exports.getJsonRpcUrl = exports.getEthersBatchProvider = exports.getEthersProvider = void 0;
var os_1 = __importDefault(require("os"));
var fs_1 = __importDefault(require("fs"));
var path_1 = require("path");
var jsonc_1 = require("jsonc");
var lodash_1 = __importDefault(require("lodash"));
var sha3_1 = require("sha3");
var _1 = require(".");
var _2 = require(".");
var getEthersProvider = function () {
    return new _2.ethers.providers.JsonRpcProvider(exports.getJsonRpcUrl());
};
exports.getEthersProvider = getEthersProvider;
var getEthersBatchProvider = function () {
    return new _2.ethers.providers.JsonRpcBatchProvider(exports.getJsonRpcUrl());
};
exports.getEthersBatchProvider = getEthersBatchProvider;
var getFortaConfig = function () {
    var config = {};
    var globalConfigPath = path_1.join(os_1.default.homedir(), '.forta', 'forta.config.json');
    if (fs_1.default.existsSync(globalConfigPath)) {
        config = Object.assign(config, jsonc_1.jsonc.parse(fs_1.default.readFileSync(globalConfigPath, 'utf8')));
    }
    var configFlagIndex = process.argv.indexOf('--config');
    var configFile = configFlagIndex == -1 ? undefined : process.argv[configFlagIndex + 1];
    var localConfigPath = path_1.join(process.cwd(), configFile || 'forta.config.json');
    if (fs_1.default.existsSync(localConfigPath)) {
        config = Object.assign(config, jsonc_1.jsonc.parse(fs_1.default.readFileSync(localConfigPath, 'utf8')));
    }
    return config;
};
var getJsonRpcUrl = function () {
    if (process.env.JSON_RPC_HOST) {
        return "http://" + process.env.JSON_RPC_HOST + (process.env.JSON_RPC_PORT ? ":" + process.env.JSON_RPC_PORT : '');
    }
    var jsonRpcUrl = getFortaConfig().jsonRpcUrl;
    if (!jsonRpcUrl)
        throw new Error('no jsonRpcUrl found');
    if (!jsonRpcUrl.startsWith("http"))
        throw new Error('jsonRpcUrl must begin with http(s)');
    return jsonRpcUrl;
};
exports.getJsonRpcUrl = getJsonRpcUrl;
var createTransactionEvent = function (_a) {
    var _b = _a.type, type = _b === void 0 ? _1.EventType.BLOCK : _b, _c = _a.network, network = _c === void 0 ? _1.Network.MAINNET : _c, transaction = _a.transaction, receipt = _a.receipt, _d = _a.traces, traces = _d === void 0 ? [] : _d, _e = _a.addresses, addresses = _e === void 0 ? {} : _e, block = _a.block;
    return new _1.TransactionEvent(type, network, transaction, receipt, traces, addresses, block);
};
exports.createTransactionEvent = createTransactionEvent;
var createBlockEvent = function (_a) {
    var _b = _a.type, type = _b === void 0 ? _1.EventType.BLOCK : _b, _c = _a.network, network = _c === void 0 ? _1.Network.MAINNET : _c, block = _a.block;
    return new _1.BlockEvent(type, network, block);
};
exports.createBlockEvent = createBlockEvent;
var assertIsNonEmptyString = function (str, varName) {
    if (!lodash_1.default.isString(str) || str.length === 0) {
        throw new Error(varName + " must be non-empty string");
    }
};
exports.assertIsNonEmptyString = assertIsNonEmptyString;
var assertIsFromEnum = function (value, Enum, varName) {
    if (!Object.values(Enum).includes(value)) {
        throw new Error(varName + " must be valid enum value");
    }
};
exports.assertIsFromEnum = assertIsFromEnum;
var keccak256 = function (str) {
    var hash = new sha3_1.Keccak(256);
    hash.update(str);
    return "0x" + hash.digest('hex');
};
exports.keccak256 = keccak256;
