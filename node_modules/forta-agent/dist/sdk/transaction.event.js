"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionEvent = void 0;
var utils_1 = require("./utils");
var _1 = require(".");
var lodash_1 = __importDefault(require("lodash"));
var TransactionEvent = (function () {
    function TransactionEvent(type, network, transaction, receipt, traces, addresses, block) {
        if (traces === void 0) { traces = []; }
        this.type = type;
        this.network = network;
        this.transaction = transaction;
        this.receipt = receipt;
        this.traces = traces;
        this.addresses = addresses;
        this.block = block;
    }
    Object.defineProperty(TransactionEvent.prototype, "hash", {
        get: function () {
            return this.transaction.hash;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "from", {
        get: function () {
            return this.transaction.from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "to", {
        get: function () {
            return this.transaction.to;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "status", {
        get: function () {
            return this.receipt.status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "gasUsed", {
        get: function () {
            return this.receipt.gasUsed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "gasPrice", {
        get: function () {
            return this.transaction.gasPrice;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "logs", {
        get: function () {
            return this.receipt.logs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "timestamp", {
        get: function () {
            return this.block.timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "blockNumber", {
        get: function () {
            return this.block.number;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionEvent.prototype, "blockHash", {
        get: function () {
            return this.block.hash;
        },
        enumerable: false,
        configurable: true
    });
    TransactionEvent.prototype.filterEvent = function (eventSignature, contractAddress) {
        if (contractAddress === void 0) { contractAddress = ''; }
        var eventTopic = utils_1.keccak256(eventSignature).toLowerCase();
        contractAddress = contractAddress.toLowerCase();
        var events = this.receipt.logs.filter(function (log) { return log.topics.length
            && log.topics[0].toLowerCase() === eventTopic
            && (contractAddress.length ? log.address.toLowerCase() === contractAddress : true); });
        return events;
    };
    TransactionEvent.prototype.filterLog = function (eventAbi, contractAddress) {
        if (contractAddress === void 0) { contractAddress = ''; }
        eventAbi = lodash_1.default.isArray(eventAbi) ? eventAbi : [eventAbi];
        var logs = this.receipt.logs;
        if (contractAddress) {
            contractAddress = contractAddress.toLowerCase();
            logs = logs.filter(function (log) { return log.address.toLowerCase() === contractAddress; });
        }
        var results = [];
        var iface = new _1.ethers.utils.Interface(eventAbi);
        for (var _i = 0, logs_1 = logs; _i < logs_1.length; _i++) {
            var log = logs_1[_i];
            try {
                var parsedLog = iface.parseLog(log);
                results.push(Object.assign(parsedLog, { address: log.address }));
            }
            catch (e) { }
        }
        return results;
    };
    TransactionEvent.prototype.filterFunction = function (functionAbi, contractAddress) {
        if (contractAddress === void 0) { contractAddress = ''; }
        functionAbi = lodash_1.default.isArray(functionAbi) ? functionAbi : [functionAbi];
        var sources = [this.transaction];
        if (this.traces.length) {
            sources = this.traces.map(function (_a) {
                var action = _a.action;
                return ({ data: action.input, value: action.value, to: action.to });
            });
        }
        if (contractAddress) {
            contractAddress = contractAddress.toLowerCase();
            sources = sources.filter(function (source) { var _a; return ((_a = source.to) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === contractAddress; });
        }
        var results = [];
        var iface = new _1.ethers.utils.Interface(functionAbi);
        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
            var source = sources_1[_i];
            try {
                results.push(iface.parseTransaction(source));
            }
            catch (e) { }
        }
        return results;
    };
    return TransactionEvent;
}());
exports.TransactionEvent = TransactionEvent;
